#include "./ESP8266.h"
#include <SoftwareSerial.h> 
#include <Wire.h>                   //无线、
#define humanHotSensor 6   
float buttonState ;              
bool humanHotState = false;         //红外传感器接口初始状态
#define INTERVAL_SENSOR   1000             //定义传感器采样时间间隔  597000
#define INTERVAL_NET      1000             //定义发送时间
#define INTERVAL_sensor 2000         
#define SSID           "zcq"                //热点的账户   // cannot be longer than 32 characters!
#define PASSWORD       "123456789"          //热点的密码

#define IDLE_TIMEOUT_MS  3000      // Amount of time to wait (in milliseconds) with no data  received before closing the connection.  If you know the server you're accessing is quick to respond, you can reduce this value.

#define HOST_NAME   "api.heclouds.com"     

#define DEVICEID   "23877996"

#define PROJECTID "114900"

#define HOST_PORT   (80)

String apiKey="ewxxJXyhtJSvq6gHUVJUkGVgOLc= ";     //api

char buf[10];

unsigned long sensorlastTime = millis();


String mCottenData;

String jsonToSend;

float sensor_butt;                    

char  buttonState_c[7];    //换成char数组传输



SoftwareSerial mySerial(2, 3); /* RX:D3, TX:D2 */

ESP8266 wifi(mySerial);

//ESP8266 wifi(Serial1);                                      //定义一个ESP8266（wifi）的对象

unsigned long net_time1 = millis();                          //数据上传服务器时间

unsigned long sensor_time = millis();                        //传感器采样时间计时器

//int SensorData;                                   //用于存储传感器数据

String postString;                                //用于存储发送数据的字符串

//String jsonToSend;                                //用于存储发送的json格式参数



void setup(void)     //初始化函数  

{       

    

    Wire.begin();               //对无线传输初始化

    Serial.begin(9600);        //波特率设置

    while(!Serial);

    

  

    pinMode(humanHotSensor, INPUT);   //引脚设置为输入模式

   //ESP8266初始化
    Serial.print("setup begin\r\n");   

  Serial.print("FW Version:");
  Serial.println(wifi.getVersion().c_str());

  if (wifi.setOprToStationSoftAP()) {
    Serial.print("to station + softap ok\r\n");
  } else {
    Serial.print("to station + softap err\r\n");
  }

  if (wifi.joinAP(SSID, PASSWORD)) {      //加入无线网
    Serial.print("Join AP success\r\n"); 
    Serial.print("IP: ");
    Serial.println(wifi.getLocalIP().c_str());
  } else {
    Serial.print("Join AP failure\r\n");
  }

  if (wifi.disableMUX()) {
    Serial.print("single ok\r\n");
  } else {
    Serial.print("single err\r\n");
  }

  Serial.print("setup end\r\n");
    
}

void loop(void)     //循环函数  ，由采样和发送两部分组成

{   

  if (sensor_time > millis())  

  sensor_time = millis();       //设置时间

    

  if(millis() - sensor_time > INTERVAL_SENSOR)              //传感器采样时间间隔  

  {  

    getSensorData();                                        //读串口中的传感器数据

    sensor_time = millis();

  }  



    

  if (net_time1 > millis())  

  net_time1 = millis();         //设置时间

  

  if (millis() - net_time1 > INTERVAL_NET)                  //发送数据时间间隔

  {                

    updateSensorData();                                     //将数据上传到服务器的函数

    net_time1 = millis();

  }

  

}



void getSensorData(){                 //采样的函数

    humanHotState = digitalRead(humanHotSensor);//采集红外感应

    
    dtostrf(buttonState, 3, 1, buttonState_c);  //红外感应值的传递

}

void updateSensorData() {

  if (wifi.createTCP(HOST_NAME, HOST_PORT)) {      //建立TCP连接，如果失败，不能发送该数据

   
    Serial.print("create tcp ok\r\n");
    
   
     jsonToSend+="{\"button\":";

     dtostrf(humanHotState,1,2,buf);

    jsonToSend+="\""+String(buf)+"\"";    //打印采集的数据

    

    jsonToSend+="}";
    postString="POST /devices/";

    postString+=DEVICEID;

    postString+="/datapoints?type=3 HTTP/1.1";

    postString+="\r\n";

    postString+="api-key:";

    postString+=apiKey;

    postString+="\r\n";

    postString+="Host:api.heclouds.com\r\n";

    postString+="Connection:close\r\n";

    postString+="Content-Length:";

    postString+=jsonToSend.length();

    postString+="\r\n";

    postString+="\r\n";

    postString+=jsonToSend;

    postString+="\r\n";

    postString+="\r\n";

    postString+="\r\n";                               //对应串口上打印的东西的顺序



  const char *postArray = postString.c_str();                 //将str转化为char数组

  Serial.println(postArray);

  wifi.send((const uint8_t*)postArray, strlen(postArray));    //send发送命令，参数必须是这两种格式，尤其是(const uint8_t*)

  Serial.println("send success");   

     if (wifi.releaseTCP()) {                                 //释放TCP连接

        Serial.print("release tcp ok\r\n");

        } 

     else {

        Serial.print("release tcp err\r\n");

        }

      postArray = NULL;                                       //清空数组，等待下次传输数据

  

  } else {

    Serial.print("create tcp err\r\n");

  }
}
